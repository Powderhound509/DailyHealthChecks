/*
Deployment script for DailyHealthChecks

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DailyHealthChecks"
:setvar DefaultFilePrefix "DailyHealthChecks"
:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[AGStatusType]...';


GO
CREATE TYPE [dbo].[AGStatusType] AS TABLE (
    [ag_name]                [sysname]      NOT NULL,
    [replica_server_name]    NVARCHAR (256) NOT NULL,
    [role]                   NVARCHAR (60)  NOT NULL,
    [availability_mode_desc] NVARCHAR (60)  NOT NULL,
    [failover_mode_desc]     NVARCHAR (60)  NOT NULL,
    [database_name]          [sysname]      NOT NULL,
    [synchronization_state]  NVARCHAR (60)  NOT NULL,
    [synchronization_health] NVARCHAR (60)  NOT NULL,
    [lastUpdate]             DATETIME2 (7)  NOT NULL);


GO
PRINT N'Creating [dbo].[backupStatusType]...';


GO
CREATE TYPE [dbo].[backupStatusType] AS TABLE (
    [server_name]              [sysname]     NOT NULL,
    [database_name]            [sysname]     NOT NULL,
    [recovery_model_desc]      NVARCHAR (60) NULL,
    [last_full_backup]         DATETIME      NULL,
    [last_differential_backup] DATETIME      NULL,
    [last_tlog_backup]         DATETIME      NULL,
    [backup_status]            VARCHAR (8)   NOT NULL,
    [status_desc]              VARCHAR (225) NOT NULL);


GO
PRINT N'Creating [dbo].[clusterStatusType]...';


GO
CREATE TYPE [dbo].[clusterStatusType] AS TABLE (
    [cluster_node_name]   NVARCHAR (128) NULL,
    [cluster_node_status] NVARCHAR (25)  NOT NULL);


GO
PRINT N'Creating [dbo].[diskSpaceType]...';


GO
CREATE TYPE [dbo].[diskSpaceType] AS TABLE (
    [server_name]         NVARCHAR (128)  NOT NULL,
    [volume_mount_point]  NVARCHAR (256)  NULL,
    [logical_volume_name] NVARCHAR (256)  NULL,
    [total_size_gb]       DECIMAL (18, 2) NULL,
    [available_size_gb]   DECIMAL (18, 2) NULL,
    [free_space_pct]      DECIMAL (18, 2) NULL);


GO
PRINT N'Creating [dbo].[jobStatusType]...';


GO
CREATE TYPE [dbo].[jobStatusType] AS TABLE (
    [server_name]        NVARCHAR (128)  NOT NULL,
    [job_name]           [sysname]       NOT NULL,
    [current_run_status] VARCHAR (11)    NULL,
    [last_start_date]    DATETIME        NULL,
    [last_stop_date]     DATETIME        NULL,
    [last_run_status]    VARCHAR (9)     NULL,
    [job_output]         NVARCHAR (4000) NULL);


GO
PRINT N'Creating [dbo].[serviceStatusType]...';


GO
CREATE TYPE [dbo].[serviceStatusType] AS TABLE (
    [server_name]       NVARCHAR (128) NULL,
    [service_name]      NVARCHAR (256) NOT NULL,
    [startup_type_desc] NVARCHAR (256) NULL,
    [status_desc]       NVARCHAR (256) NOT NULL);


GO
PRINT N'Creating [dbo].[AGStatusHistory]...';


GO
CREATE TABLE [dbo].[AGStatusHistory] (
    [recordId]               INT            NOT NULL,
    [ag_name]                [sysname]      NOT NULL,
    [replica_server_name]    NVARCHAR (256) NOT NULL,
    [role]                   NVARCHAR (60)  NOT NULL,
    [availability_mode_desc] NVARCHAR (60)  NOT NULL,
    [failover_mode_desc]     NVARCHAR (60)  NOT NULL,
    [database_name]          [sysname]      NOT NULL,
    [synchronization_state]  NVARCHAR (60)  NOT NULL,
    [synchronization_health] NVARCHAR (60)  NOT NULL,
    [lastUpdate]             DATETIME2 (7)  NOT NULL,
    [SysStartTime]           DATETIME2 (7)  NOT NULL,
    [SysEndTime]             DATETIME2 (7)  NOT NULL
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[AGStatusHistory].[IX_AGStatusHistory]...';


GO
CREATE CLUSTERED INDEX [IX_AGStatusHistory]
    ON [dbo].[AGStatusHistory]([recordId]);

CREATE CLUSTERED COLUMNSTORE INDEX [IX_AGStatusHistory]
    ON [dbo].[AGStatusHistory] WITH (DROP_EXISTING = ON);


GO
PRINT N'Creating [dbo].[AGStatusHistory].[IX_AGStatusHistory_ID_PERIOD_COLUMNS]...';


GO
CREATE NONCLUSTERED INDEX [IX_AGStatusHistory_ID_PERIOD_COLUMNS]
    ON [dbo].[AGStatusHistory]([SysEndTime] ASC, [SysStartTime] ASC, [recordId] ASC);


GO
PRINT N'Creating [dbo].[backupStatusHistory]...';


GO
CREATE TABLE [dbo].[backupStatusHistory] (
    [recordId]                 INT           NOT NULL,
    [server_name]              [sysname]     NOT NULL,
    [database_name]            [sysname]     NOT NULL,
    [recovery_model_desc]      NVARCHAR (60) NULL,
    [last_full_backup]         DATETIME2 (7) NULL,
    [last_differential_backup] DATETIME2 (7) NULL,
    [last_tlog_backup]         DATETIME2 (7) NULL,
    [backup_status]            VARCHAR (8)   NOT NULL,
    [status_desc]              VARCHAR (225) NOT NULL,
    [SysStartTime]             DATETIME2 (7) NOT NULL,
    [SysEndTime]               DATETIME2 (7) NOT NULL
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[backupStatusHistory].[IX_backupStatusHistory]...';


GO
CREATE CLUSTERED INDEX [IX_backupStatusHistory]
    ON [dbo].[backupStatusHistory]([recordId]);

CREATE CLUSTERED COLUMNSTORE INDEX [IX_backupStatusHistory]
    ON [dbo].[backupStatusHistory] WITH (DROP_EXISTING = ON);


GO
PRINT N'Creating [dbo].[backupStatusHistory].[IX_backupStatusHistory_ID_PERIOD_COLUMNS]...';


GO
CREATE NONCLUSTERED INDEX [IX_backupStatusHistory_ID_PERIOD_COLUMNS]
    ON [dbo].[backupStatusHistory]([SysEndTime] ASC, [SysStartTime] ASC, [recordId] ASC);


GO
PRINT N'Creating [dbo].[clusterStatusHistory]...';


GO
CREATE TABLE [dbo].[clusterStatusHistory] (
    [recordId]            INT            NOT NULL,
    [cluster_node_name]   NVARCHAR (128) NULL,
    [cluster_node_status] NVARCHAR (25)  NOT NULL,
    [SysStartTime]        DATETIME2 (7)  NOT NULL,
    [SysEndTime]          DATETIME2 (7)  NOT NULL
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[clusterStatusHistory].[IX_clusterStatusHistory]...';


GO
CREATE CLUSTERED INDEX [IX_clusterStatusHistory]
    ON [dbo].[clusterStatusHistory]([recordId]);

CREATE CLUSTERED COLUMNSTORE INDEX [IX_clusterStatusHistory]
    ON [dbo].[clusterStatusHistory] WITH (DROP_EXISTING = ON);


GO
PRINT N'Creating [dbo].[clusterStatusHistory].[IX_clusterStatusHistory_ID_PERIOD_COLUMNS]...';


GO
CREATE NONCLUSTERED INDEX [IX_clusterStatusHistory_ID_PERIOD_COLUMNS]
    ON [dbo].[clusterStatusHistory]([SysEndTime] ASC, [SysStartTime] ASC, [recordId] ASC);


GO
PRINT N'Creating [dbo].[DatabaseStatusHistory]...';


GO
CREATE TABLE [dbo].[DatabaseStatusHistory] (
    [recordId]       INT           NOT NULL,
    [serverName]     VARCHAR (128) NOT NULL,
    [databaseName]   VARCHAR (128) NOT NULL,
    [databaseStatus] VARCHAR (25)  NOT NULL,
    [lastUpdate]     DATETIME2 (7) NOT NULL,
    [SysStartTime]   DATETIME2 (7) NOT NULL,
    [SysEndTime]     DATETIME2 (7) NOT NULL
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[DatabaseStatusHistory].[IX_DatabaseStatusHistory]...';


GO
CREATE CLUSTERED INDEX [IX_DatabaseStatusHistory]
    ON [dbo].[DatabaseStatusHistory]([recordId]);

CREATE CLUSTERED COLUMNSTORE INDEX [IX_DatabaseStatusHistory]
    ON [dbo].[DatabaseStatusHistory] WITH (DROP_EXISTING = ON);


GO
PRINT N'Creating [dbo].[DatabaseStatusHistory].[IX_DatabaseStatusHistory_ID_PERIOD_COLUMNS]...';


GO
CREATE NONCLUSTERED INDEX [IX_DatabaseStatusHistory_ID_PERIOD_COLUMNS]
    ON [dbo].[DatabaseStatusHistory]([SysEndTime] ASC, [SysStartTime] ASC, [recordId] ASC);


GO
PRINT N'Creating [dbo].[diskSpaceHistory]...';


GO
CREATE TABLE [dbo].[diskSpaceHistory] (
    [recordId]            INT             NOT NULL,
    [server_name]         NVARCHAR (128)  NOT NULL,
    [volume_mount_point]  NVARCHAR (256)  NULL,
    [logical_volume_name] NVARCHAR (256)  NULL,
    [total_size_gb]       DECIMAL (18, 2) NULL,
    [available_size_gb]   DECIMAL (18, 2) NULL,
    [free_space_pct]      DECIMAL (18, 2) NULL,
    [SysStartTime]        DATETIME2 (7)   NOT NULL,
    [SysEndTime]          DATETIME2 (7)   NOT NULL
);


GO
PRINT N'Creating [dbo].[diskSpaceHistory].[IX_diskSpaceHistory]...';


GO
CREATE CLUSTERED INDEX [IX_diskSpaceHistory]
    ON [dbo].[diskSpaceHistory]([recordId]);

CREATE CLUSTERED COLUMNSTORE INDEX [IX_diskSpaceHistory]
    ON [dbo].[diskSpaceHistory] WITH (DROP_EXISTING = ON);


GO
PRINT N'Creating [dbo].[diskSpaceHistory].[IX_diskSpaceHistory_ID_PERIOD_COLUMNS]...';


GO
CREATE NONCLUSTERED INDEX [IX_diskSpaceHistory_ID_PERIOD_COLUMNS]
    ON [dbo].[diskSpaceHistory]([SysEndTime] ASC, [SysStartTime] ASC, [recordId] ASC);


GO
PRINT N'Creating [dbo].[jobStatusHistory]...';


GO
CREATE TABLE [dbo].[jobStatusHistory] (
    [recordId]           INT             NOT NULL,
    [server_name]        NVARCHAR (128)  NOT NULL,
    [job_name]           [sysname]       NOT NULL,
    [current_run_status] VARCHAR (11)    NULL,
    [last_start_date]    DATETIME2 (7)   NULL,
    [last_stop_date]     DATETIME2 (7)   NULL,
    [last_run_status]    VARCHAR (9)     NULL,
    [job_output]         NVARCHAR (4000) NULL,
    [SysStartTime]       DATETIME2 (7)   NOT NULL,
    [SysEndTime]         DATETIME2 (7)   NOT NULL
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[jobStatusHistory].[IX_jobStatusHistory]...';


GO
CREATE CLUSTERED INDEX [IX_jobStatusHistory]
    ON [dbo].[jobStatusHistory]([recordId]);

CREATE CLUSTERED COLUMNSTORE INDEX [IX_jobStatusHistory]
    ON [dbo].[jobStatusHistory] WITH (DROP_EXISTING = ON);


GO
PRINT N'Creating [dbo].[jobStatusHistory].[IX_jobStatusHistory_ID_PERIOD_COLUMNS]...';


GO
CREATE NONCLUSTERED INDEX [IX_jobStatusHistory_ID_PERIOD_COLUMNS]
    ON [dbo].[jobStatusHistory]([SysEndTime] ASC, [SysStartTime] ASC, [recordId] ASC);


GO
PRINT N'Creating [dbo].[serviceStatusHistory]...';


GO
CREATE TABLE [dbo].[serviceStatusHistory] (
    [recordId]          INT            NOT NULL,
    [server_name]       NVARCHAR (128) NULL,
    [service_name]      NVARCHAR (256) NOT NULL,
    [startup_type_desc] NVARCHAR (256) NULL,
    [status_desc]       NVARCHAR (256) NOT NULL,
    [SysStartTime]      DATETIME2 (7)  NOT NULL,
    [SysEndTime]        DATETIME2 (7)  NOT NULL
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[serviceStatusHistory].[IX_serviceStatusHistory]...';


GO
CREATE CLUSTERED INDEX [IX_serviceStatusHistory]
    ON [dbo].[serviceStatusHistory]([recordId]);

CREATE CLUSTERED COLUMNSTORE INDEX [IX_serviceStatusHistory]
    ON [dbo].[serviceStatusHistory] WITH (DROP_EXISTING = ON);


GO
PRINT N'Creating [dbo].[serviceStatusHistory].[IX_serviceStatusHistory_ID_PERIOD_COLUMNS]...';


GO
CREATE NONCLUSTERED INDEX [IX_serviceStatusHistory_ID_PERIOD_COLUMNS]
    ON [dbo].[serviceStatusHistory]([SysEndTime] ASC, [SysStartTime] ASC, [recordId] ASC);


GO
PRINT N'Creating [dbo].[SQLUpTimeHistory]...';


GO
CREATE TABLE [dbo].[SQLUpTimeHistory] (
    [recordId]        INT           NOT NULL,
    [serverName]      VARCHAR (128) NOT NULL,
    [serverStartTime] DATETIME2 (7) NOT NULL,
    [SysStartTime]    DATETIME2 (7) NOT NULL,
    [SysEndTime]      DATETIME2 (7) NOT NULL
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[SQLUpTimeHistory].[IX_SQLUpTimeHistory]...';


GO
CREATE CLUSTERED INDEX [IX_SQLUpTimeHistory]
    ON [dbo].[SQLUpTimeHistory]([recordId]);

CREATE CLUSTERED COLUMNSTORE INDEX [IX_SQLUpTimeHistory]
    ON [dbo].[SQLUpTimeHistory] WITH (DROP_EXISTING = ON);


GO
PRINT N'Creating [dbo].[SQLUpTimeHistory].[IX_SQLUpTimeHistory_ID_PERIOD_COLUMNS]...';


GO
CREATE NONCLUSTERED INDEX [IX_SQLUpTimeHistory_ID_PERIOD_COLUMNS]
    ON [dbo].[SQLUpTimeHistory]([SysEndTime] ASC, [SysStartTime] ASC, [recordId] ASC);


GO
PRINT N'Creating [dbo].[AGStatus]...';


GO
CREATE TABLE [dbo].[AGStatus] (
    [recordId]               INT                                         IDENTITY (1, 1) NOT NULL,
    [ag_name]                [sysname]                                   NOT NULL,
    [replica_server_name]    NVARCHAR (256)                              NOT NULL,
    [role]                   NVARCHAR (60)                               NOT NULL,
    [availability_mode_desc] NVARCHAR (60)                               NOT NULL,
    [failover_mode_desc]     NVARCHAR (60)                               NOT NULL,
    [database_name]          [sysname]                                   NOT NULL,
    [synchronization_state]  NVARCHAR (60)                               NOT NULL,
    [synchronization_health] NVARCHAR (60)                               NOT NULL,
    [lastUpdate]             DATETIME2 (7)                               NOT NULL,
    [SysStartTime]           DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]             DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    CONSTRAINT [PK_AGStatus_RID] PRIMARY KEY CLUSTERED ([recordId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
) ON [PRIMARY]
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[dbo].[AGStatusHistory], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating [dbo].[backupStatus]...';


GO
CREATE TABLE [dbo].[backupStatus] (
    [recordId]                 INT                                         IDENTITY (1, 1) NOT NULL,
    [server_name]              [sysname]                                   NOT NULL,
    [database_name]            [sysname]                                   NOT NULL,
    [recovery_model_desc]      NVARCHAR (60)                               NULL,
    [last_full_backup]         DATETIME2 (7)                               NULL,
    [last_differential_backup] DATETIME2 (7)                               NULL,
    [last_tlog_backup]         DATETIME2 (7)                               NULL,
    [backup_status]            VARCHAR (8)                                 NOT NULL,
    [status_desc]              VARCHAR (225)                               NOT NULL,
    [SysStartTime]             DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]               DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    PRIMARY KEY NONCLUSTERED ([recordId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
) ON [PRIMARY]
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[dbo].[backupStatusHistory], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating [dbo].[clusterStatus]...';


GO
CREATE TABLE [dbo].[clusterStatus] (
    [recordId]            INT                                         IDENTITY (1, 1) NOT NULL,
    [cluster_node_name]   NVARCHAR (128)                              NULL,
    [cluster_node_status] NVARCHAR (25)                               NOT NULL,
    [SysStartTime]        DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]          DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    PRIMARY KEY NONCLUSTERED ([recordId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
) ON [PRIMARY]
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[dbo].[clusterStatusHistory], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating [dbo].[DatabaseStatus]...';


GO
CREATE TABLE [dbo].[DatabaseStatus] (
    [recordId]       INT                                         IDENTITY (1, 1) NOT NULL,
    [serverName]     VARCHAR (128)                               NOT NULL,
    [databaseName]   VARCHAR (128)                               NOT NULL,
    [databaseStatus] VARCHAR (25)                                NOT NULL,
    [lastUpdate]     DATETIME2 (7)                               NOT NULL,
    [SysStartTime]   DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]     DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    CONSTRAINT [PK_DBStatus_RID] PRIMARY KEY CLUSTERED ([recordId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
) ON [PRIMARY]
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[dbo].[DatabaseStatusHistory], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating [dbo].[diskSpace]...';


GO
CREATE TABLE [dbo].[diskSpace] (
    [recordId]            INT                                         IDENTITY (1, 1) NOT NULL,
    [server_name]         NVARCHAR (128)                              NOT NULL,
    [volume_mount_point]  NVARCHAR (256)                              NULL,
    [logical_volume_name] NVARCHAR (256)                              NULL,
    [total_size_gb]       DECIMAL (18, 2)                             NULL,
    [available_size_gb]   DECIMAL (18, 2)                             NULL,
    [free_space_pct]      DECIMAL (18, 2)                             NULL,
    [SysStartTime]        DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]          DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    PRIMARY KEY NONCLUSTERED ([recordId] ASC) ON [PRIMARY],
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
) ON [PRIMARY]
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[dbo].[diskSpaceHistory], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating [dbo].[jobStatus]...';


GO
CREATE TABLE [dbo].[jobStatus] (
    [recordId]           INT                                         IDENTITY (1, 1) NOT NULL,
    [server_name]        NVARCHAR (128)                              NOT NULL,
    [job_name]           [sysname]                                   NOT NULL,
    [current_run_status] VARCHAR (11)                                NULL,
    [last_start_date]    DATETIME2 (7)                               NULL,
    [last_stop_date]     DATETIME2 (7)                               NULL,
    [last_run_status]    VARCHAR (9)                                 NULL,
    [job_output]         NVARCHAR (4000)                             NULL,
    [SysStartTime]       DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]         DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    PRIMARY KEY NONCLUSTERED ([recordId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
) ON [PRIMARY]
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[dbo].[jobStatusHistory], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating [dbo].[serviceStatus]...';


GO
CREATE TABLE [dbo].[serviceStatus] (
    [recordId]          INT                                         IDENTITY (1, 1) NOT NULL,
    [server_name]       NVARCHAR (128)                              NULL,
    [service_name]      NVARCHAR (256)                              NOT NULL,
    [startup_type_desc] NVARCHAR (256)                              NULL,
    [status_desc]       NVARCHAR (256)                              NOT NULL,
    [SysStartTime]      DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]        DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    PRIMARY KEY NONCLUSTERED ([recordId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
) ON [PRIMARY]
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[dbo].[serviceStatusHistory], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating [dbo].[SQLUpTime]...';


GO
CREATE TABLE [dbo].[SQLUpTime] (
    [recordId]        INT                                         IDENTITY (1, 1) NOT NULL,
    [serverName]      VARCHAR (128)                               NOT NULL,
    [serverStartTime] DATETIME2 (7)                               NOT NULL,
    [SysStartTime]    DATETIME2 (7) GENERATED ALWAYS AS ROW START NOT NULL,
    [SysEndTime]      DATETIME2 (7) GENERATED ALWAYS AS ROW END   NOT NULL,
    CONSTRAINT [PK_SQLUpTime_RID] PRIMARY KEY CLUSTERED ([recordId] ASC),
    PERIOD FOR SYSTEM_TIME ([SysStartTime], [SysEndTime])
) ON [PRIMARY]
WITH (SYSTEM_VERSIONING = ON (HISTORY_TABLE=[dbo].[SQLUpTimeHistory], DATA_CONSISTENCY_CHECK=ON));


GO
PRINT N'Creating unnamed constraint on [dbo].[AGStatus]...';


GO
ALTER TABLE [dbo].[AGStatus]
    ADD DEFAULT getdate() FOR [lastUpdate];


GO
PRINT N'Creating unnamed constraint on [dbo].[DatabaseStatus]...';


GO
ALTER TABLE [dbo].[DatabaseStatus]
    ADD DEFAULT GETDATE() FOR [lastUpdate];


GO
PRINT N'Creating [dbo].[sp_update_AGStatus]...';


GO
CREATE PROCEDURE dbo.sp_update_AGStatus @AGStatus AGStatusType READONLY
AS
BEGIN
	SET NOCOUNT ON
	-- Merge results into table
	MERGE dbo.AGStatus AS [target]
	USING 
		(
		SELECT	[ag_name],
				[replica_server_name],
				[role],
				[availability_mode_desc],
				[failover_mode_desc],
				[database_name],
				[synchronization_state],
				[synchronization_health],
				[lastUpdate]
		FROM @AGStatus 
		) AS [source](	[ag_name],
						[replica_server_name],
						[role],
						[availability_mode_desc],
						[failover_mode_desc],
						[database_name],
						[synchronization_state],
						[synchronization_health],
						[lastUpdate])
		ON ([target].ag_name = [source].ag_name and
			[target].replica_server_name = [source].replica_server_name and
			[target].[database_name] = [source].[database_name])
		WHEN MATCHED
			THEN UPDATE SET
						[target].[role]=[source].[role],
						[target].[availability_mode_desc]=[source].[availability_mode_desc],
						[target].[failover_mode_desc]=[source].[failover_mode_desc],
						[target].[synchronization_state]=[source].[synchronization_state],
						[target].[synchronization_health]=[source].[synchronization_health],
						[target].[lastUpdate]=[source].[lastUpdate]
		WHEN NOT MATCHED THEN
			INSERT	(
					[ag_name],
					[replica_server_name],
					[role],
					[availability_mode_desc],
					[failover_mode_desc],
					[database_name],
					[synchronization_state],
					[synchronization_health],
					[lastUpdate]
					)
			VALUES	(
					[source].[ag_name],
					[source].[replica_server_name],
					[source].[role],
					[source].[availability_mode_desc],
					[source].[failover_mode_desc],
					[source].[database_name],
					[source].[synchronization_state],
					[source].[synchronization_health],
					[source].[lastUpdate]
					);
END
GO
PRINT N'Creating [dbo].[sp_update_backupStatus]...';


GO
create procedure sp_update_backupStatus (@backupStatus backupStatusType READONLY)
as begin
	-- merge status into table
	select * from @backupStatus
end
GO
PRINT N'Creating [dbo].[sp_update_clusterStatus]...';


GO
create procedure sp_update_clusterStatus (@clusterStatus clusterStatusType READONLY)
as begin
	-- merge clusterStatus into table
	select * from @clusterStatus
end
GO
PRINT N'Creating [dbo].[sp_update_DatabaseStatus]...';


GO
CREATE PROC sp_update_DatabaseStatus(@serverName NVARCHAR(128), @databaseName NVARCHAR(128), @databaseStatus NVARCHAR(25))
AS BEGIN

IF NOT EXISTS(SELECT serverName FROM DatabaseStatus WHERE serverName = @serverName AND databaseName = @databaseName)
		BEGIN
			INSERT INTO DatabaseStatus (serverName, databaseName, databaseStatus, lastUpdate)
			VALUES(@serverName, @databaseName, @databaseStatus, getdate())
		END
	ELSE -- update the record and the history table will track the changes
		BEGIN
			UPDATE DatabaseStatus SET databaseStatus = @databaseStatus, lastUpdate = getdate()
				WHERE  serverName = @serverName and databaseName = @databaseName
		END	
END
GO
PRINT N'Creating [dbo].[sp_update_diskSpace]...';


GO
create procedure sp_update_diskSpace (@diskSpace diskSpaceType READONLY)
as begin
	-- merge diskSpace into table
	select * from @diskSpace
end
GO
PRINT N'Creating [dbo].[sp_update_jobStatus]...';


GO
create procedure sp_update_jobStatus (@jobStatus jobStatusType READONLY)
as begin
	-- merge diskSpace into table
	select * from @jobStatus
end
GO
PRINT N'Creating [dbo].[sp_update_serviceStatus]...';


GO
create procedure sp_update_serviceStatus (@serviceStatus serviceStatusType READONLY)
as begin
	-- merge diskSpace into table
	select * from @serviceStatus
end
GO
PRINT N'Creating [dbo].[sp_update_SQLUpTime]...';


GO
CREATE PROC sp_update_SQLUpTime(@serverName VARCHAR(128), @startupTime DATETIME2)
AS BEGIN
	-- Check if there's already a record for the server\instance
	IF NOT EXISTS(SELECT 'a' FROM SQLUpTime WHERE serverName = @serverName)
		BEGIN
			INSERT INTO SQLUpTime (serverName, serverStartTime)
			VALUES(@serverName, @startupTime)
		END
	ELSE -- update the record and the history table will track the changes
		BEGIN
			UPDATE SQLUpTime SET serverStartTime = @startupTime
				WHERE serverStartTime < @startupTime
				AND serverName = @serverName
		END	
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
